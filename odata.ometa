ometa ODataParser <: OMeta { // Cheating
  Number = <digit+>:d -> parseInt(d, 10),
  Text =
    <	(	~'\''
        (	'\\' anything
        |	letter
        )
      )*
    >:text
    -> text
  ,

  QuotedText =
    '\''
    Text:t 
    '\'' -> t
  ,

  OData = (
    (
      PathSegment:model 
      (
        '?'
        ( listOf(`QueryOption, '&'):options
        )
      )?
    ) -> { 
            if(options) {
             model.options = {}
             for(var i in options)
               model.options[options[i].name] = options[i].value;
            }
           return model
         }
    | '/'
  ) 
  ,

  QueryOption = 
      SortOption
    | TopOption
    | SkipOption
    | InlineCountOption
    | FilterByOption
    | OperationParam
  ,

  OperationParam = 
    Text:name '=' Text:value -> { name: name, value: value }
  ,

  SortOption = 
    seq("$orderby=")
    listOf(`SortProperty, ','):properties -> { name: '$orderby', value: { properties: properties }  }
  ,

  SortProperty = 
    PropertyPath:property
    (
      seq(" asc") -> "asc"
    | seq(" desc") -> "desc"
    )?:order
    -> {
         property.order = order;
         return property;
       }
  ,

  TopOption = 
    seq("$top=") Number:value -> { name: "$top", value: value }
  ,

  SkipOption = 
    seq("$skip=") Number:value -> { name: "$skip", value: value }
  ,

  InlineCountOption =
    seq("$inlinecount=") 
    (
      seq("allpages") -> "allpages"
    | seq("none") -> "none"
    | Text -> ""
    ):value -> { name: "$inlinecount", value: value }
  ,

  FilterByOption = 
    seq("$filterby=")
    FilterByExpression:expr -> { name: "$filterby", value: expr }
  ,

  FilterByExpression =
    FilterAndExpression
  ,

  FilterAndExpression =
    FilterAndExpression:lhs
    FilterAndOperand:op
    FilterLogicalExpression:rhs -> [ op, lhs, rhs ]
  | FilterLogicalExpression
  ,

  FilterLogicalExpression =
    FilterLogicalExpression:lhs
    FilterByOperand:op
    FilterByValue:rhs -> [ op, lhs, rhs ]
  | FilterByValue

  ,
    
  FilterAndOperand =
    spaces
    (
      seq("and")
    | seq("or")
    ):op 
    spaces -> op
  ,

  FilterByOperand =
    spaces
    (
      seq("eq")
    | seq("ne")
    | seq("gt")
    | seq("ge")
    | seq("lt")
    | seq("le")
    ):op 
    spaces -> op
    ,

  FilterByValue = 
    Number
  | QuotedText
  | PropertyPath
  ,

  PropertyPath = 
          ResourceName:resource
          (
            '/'
            PropertyPath: next
          )? -> { name: resource, property: next}
  ,
  PathSegment = 
        '/'
        ResourceName:resource
        (
          ("(" Number:key ")")?
          (
            (seq("/$links") PathSegment:link)
          | PathSegment: next
          )?
        ) -> { resource: resource, key: key, link: link, property: next }
  ,

  ResourcePart =
    <	(	letter
      |	'_'
      )+
    >:resourcePart
    -> resourcePart.replace(new RegExp('_', 'g'), ' ')
  ,

  ResourceName =
    <	ResourcePart
      (	'-'
        ResourcePart
      )*
    >
}

exports.ODataParser = ODataParser
